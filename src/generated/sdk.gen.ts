// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type {
  SearchData,
  SearchResponses,
  CreateData,
  CreateResponses,
  SearchEmailConfigurationsData,
  SearchEmailConfigurationsResponses,
  CreateEmailConfigurationData,
  CreateEmailConfigurationResponses,
  CreateAwarenessBannerClickedData,
  CreateAwarenessBannerClickedResponses,
  Create1Data,
  Create1Responses,
  Create2Data,
  Create2Responses,
  FetchAllData,
  FetchAllResponses,
  CreateMappingData,
  CreateMappingResponses,
  SearchGitlabConfigurationData,
  SearchGitlabConfigurationResponses,
  Create3Data,
  Create3Responses,
  FetchAll1Data,
  FetchAll1Responses,
  CreateMapping1Data,
  CreateMapping1Responses,
  SearchGithubConfigurationData,
  SearchGithubConfigurationResponses,
  CreateGithubConfigurationData,
  CreateGithubConfigurationResponses,
  CreateBoundProjectData,
  CreateBoundProjectResponses,
  Create4Data,
  Create4Responses,
  Search1Data,
  Search1Responses,
  Create5Data,
  Create5Responses,
  Search2Data,
  Search2Responses,
  Create6Data,
  Create6Responses,
  DeactivateData,
  DeactivateResponses,
  FetchUserData,
  FetchUserResponses,
  UpdateUserData,
  UpdateUserResponses,
  DeleteEmailConfigurationData,
  DeleteEmailConfigurationResponses,
  GetEmailConfigurationData,
  GetEmailConfigurationResponses,
  UpdateEmailConfigurationData,
  UpdateEmailConfigurationResponses,
  GetFeatureEnablementData,
  GetFeatureEnablementResponses,
  UpdateFeatureEnablementData,
  UpdateFeatureEnablementResponses,
  GetFeatureEnablement1Data,
  GetFeatureEnablement1Responses,
  UpdateFeatureEnablement1Data,
  UpdateFeatureEnablement1Responses,
  DeleteMappingData,
  DeleteMappingResponses,
  UpdateMappingData,
  UpdateMappingResponses,
  DeleteGitlabConfigurationData,
  DeleteGitlabConfigurationResponses,
  GetGitlabConfigurationData,
  GetGitlabConfigurationResponses,
  UpdateGitlabConfigurationData,
  UpdateGitlabConfigurationResponses,
  DeleteMapping1Data,
  DeleteMapping1Responses,
  UpdateMapping1Data,
  UpdateMapping1Responses,
  DeleteGithubConfigurationData,
  DeleteGithubConfigurationResponses,
  GetGithubConfigurationData,
  GetGithubConfigurationResponses,
  UpdateGithubConfigurationData,
  UpdateGithubConfigurationResponses,
  GetModeData,
  GetModeResponses,
  PatchModeData,
  PatchModeResponses,
  DeleteGroupData,
  DeleteGroupResponses,
  FetchGroupData,
  FetchGroupResponses,
  UpdateGroupData,
  UpdateGroupResponses,
  GetStatusData,
  GetStatusResponses,
  LivenessCheckData,
  LivenessCheckResponses,
  LivenessCheckErrors,
  GetHealthData,
  GetHealthResponses,
  GenerateReportData,
  GenerateReportResponses,
  Search3Data,
  Search3Responses,
  FetchReleaseData,
  FetchReleaseResponses,
  Search4Data,
  Search4Responses,
  FetchDependencyRiskData,
  FetchDependencyRiskResponses,
  GetScaClisMetadataData,
  GetScaClisMetadataResponses,
  DownloadScaCliData,
  DownloadScaCliResponses,
  GetLlmProvidersData,
  GetLlmProvidersResponses,
  GetData,
  GetResponses,
  GetSubscriptionTypeData,
  GetSubscriptionTypeResponses,
  Get1Data,
  Get1Responses,
  GetProjectBindingByProjectIdData,
  GetProjectBindingByProjectIdResponses,
  GetProjectBindingData,
  GetProjectBindingResponses,
  FetchAllDopSettingsData,
  FetchAllDopSettingsResponses,
  踼Data,
  踼Responses,
  GetVersionData,
  GetVersionResponses,
  GetJresMetadataData,
  GetJresMetadataResponses,
  DownloadJreData,
  DownloadJreResponses,
  DownloadScannerEngineData,
  DownloadScannerEngineResponses,
  GetActiveRulesData,
  GetActiveRulesResponses,
  DeleteData,
  DeleteResponses,
  SearchIssuesData,
  SearchIssuesResponses,
  SearchIssuesErrors,
  SearchProjectsData,
  SearchProjectsResponses,
  SearchProjectsErrors,
  ComponentData,
  ComponentResponses,
  ComponentErrors,
  AddPermissionToAuserData,
  AddPermissionToAuserResponses,
  AddAPermissionToAGroupData,
  AddAPermissionToAGroupResponses,
  RemovePermissionFromAuserData,
  RemovePermissionFromAuserResponses,
  RemoveAPermissionFromAGroupData,
  RemoveAPermissionFromAGroupResponses,
  GetAListOfProjectsAndLicenseUsageData,
  GetAListOfProjectsAndLicenseUsageResponses,
  GetAListOfProjectsAndLicenseUsageErrors,
} from './types.gen';
import { client } from './client.gen';

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class UserController {
  /**
   * Users search
   *   Get a list of users. By default, only active users are returned.
   * The following fields are only returned when user has Administer System permission or for logged-in in user :
   * 'email',
   * 'externalIdentity',
   * 'externalProvider',
   * 'groups',
   * 'lastConnectionDate',
   * 'sonarLintLastConnectionDate',
   * 'tokensCount'.
   * Field 'sonarqubeLastConnectionDate' is only updated every hour, so it may not be accurate, for instance when a user authenticates many times in less than one hour.
   * The results are sorted alphabetically by login.
   *
   */
  public static search<ThrowOnError extends boolean = false>(
    options?: Options<SearchData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      SearchResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/users-management/users',
      ...options,
    });
  }

  /**
   * User creation
   *   Create a user.
   * If a deactivated user account exists with the given login, it will be reactivated.
   * Requires Administer System permission.
   *
   */
  public static create<ThrowOnError extends boolean = false>(
    options: Options<CreateData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      CreateResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/users-management/users',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Deactivate a user
   * Deactivates a user. Requires Administer System permission.
   */
  public static deactivate<ThrowOnError extends boolean = false>(
    options: Options<DeactivateData, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeactivateResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/users-management/users/{id}',
      ...options,
    });
  }

  /**
   * Fetch a single user
   * Fetch a single user.
   * The following fields are only returned when user has Administer System permission or for logged-in in user :
   * 'email'
   * 'externalIdentity'
   * 'externalProvider'
   * 'groups'
   * 'lastConnectionDate'
   * 'sonarLintLastConnectionDate'
   * 'tokensCount'
   * Field 'sonarqubeLastConnectionDate' is only updated every hour, so it may not be accurate, for instance when a user authenticates many times in less than one hour.
   *
   */
  public static fetchUser<ThrowOnError extends boolean = false>(
    options: Options<FetchUserData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      FetchUserResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/users-management/users/{id}',
      ...options,
    });
  }

  /**
   * Update a user
   * Update users attributes.
   *
   */
  public static updateUser<ThrowOnError extends boolean = false>(
    options: Options<UpdateUserData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateUserResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/users-management/users/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class EmailConfigurationController {
  /**
   * Search email configurations
   *   Get the list of email configurations.
   * Note that a single configuration is supported at this time.
   * Requires 'Administer System' permission.
   *
   */
  public static searchEmailConfigurations<ThrowOnError extends boolean = false>(
    options?: Options<SearchEmailConfigurationsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      SearchEmailConfigurationsResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/system/email-configurations',
      ...options,
    });
  }

  /**
   * Create an email configuration
   *   Create a new email configuration.
   * Note that only a single configuration can exist at a time.
   * Requires 'Administer System' permission.
   *
   */
  public static createEmailConfiguration<ThrowOnError extends boolean = false>(
    options: Options<CreateEmailConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      CreateEmailConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/system/email-configurations',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Delete an email configuration
   * Delete an email configuration.
   * Requires 'Administer System' permission.
   *
   */
  public static deleteEmailConfiguration<ThrowOnError extends boolean = false>(
    options: Options<DeleteEmailConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeleteEmailConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/system/email-configurations/{id}',
      ...options,
    });
  }

  /**
   * Fetch an email configuration
   * Fetch a Email configuration. Requires 'Administer System' permission.
   *
   */
  public static getEmailConfiguration<ThrowOnError extends boolean = false>(
    options: Options<GetEmailConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      GetEmailConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/system/email-configurations/{id}',
      ...options,
    });
  }

  /**
   * Update an email configuration
   * Update an email configuration. Requires 'Administer System' permission.
   *
   */
  public static updateEmailConfiguration<ThrowOnError extends boolean = false>(
    options: Options<UpdateEmailConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateEmailConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/system/email-configurations/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class FeatureEnablementController {
  /**
   * Starts a GitLab synchronization run.
   */
  public static createAwarenessBannerClicked<
    ThrowOnError extends boolean = false,
  >(options: Options<CreateAwarenessBannerClickedData, ThrowOnError>) {
    return (options.client ?? client).post<
      CreateAwarenessBannerClickedResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/fix-suggestions/feature-enablements/awareness-banner-interactions',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Fetch the Ai CodeFix feature enablement configurations
   */
  public static getFeatureEnablement1<ThrowOnError extends boolean = false>(
    options?: Options<GetFeatureEnablement1Data, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetFeatureEnablement1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/fix-suggestions/feature-enablements',
      ...options,
    });
  }

  /**
   * Enable/Disable the AI CodeFix feature at the instance or project level
   */
  public static updateFeatureEnablement1<ThrowOnError extends boolean = false>(
    options: Options<UpdateFeatureEnablement1Data, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateFeatureEnablement1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/fix-suggestions/feature-enablements',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class FixSuggestionController {
  /**
   * Suggest a fix for the given issueId
   * Requires Code Viewer permission.
   */
  public static create1<ThrowOnError extends boolean = false>(
    options: Options<Create1Data, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      Create1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/fix-suggestions/ai-suggestions',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }
}

export class GitlabSynchronizationRunController {
  /**
   * Starts a GitLab synchronization run.
   *   Adds a new GitLab synchronization run in the background tasks. Requires sys-admins permissions.
   *
   */
  public static create2<ThrowOnError extends boolean = false>(
    options?: Options<Create2Data, ThrowOnError>,
  ) {
    return (options?.client ?? client).post<
      Create2Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-synchronization-runs',
      ...options,
    });
  }
}

export class GitlabPermissionMappingsController {
  /**
   * Fetch permissions mapping
   * Get the list of all the existing roles with their permission mappings. Requires 'Administer System' permission.
   */
  public static fetchAll<ThrowOnError extends boolean = false>(
    options?: Options<FetchAllData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      FetchAllResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-permission-mappings',
      ...options,
    });
  }

  /**
   * Create a permission mapping for a custom role
   * Requires 'Administer System' permission.
   */
  public static createMapping<ThrowOnError extends boolean = false>(
    options: Options<CreateMappingData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      CreateMappingResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-permission-mappings',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Delete a single permission mappings
   * Requires 'Administer System' permission.
   */
  public static deleteMapping<ThrowOnError extends boolean = false>(
    options: Options<DeleteMappingData, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeleteMappingResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-permission-mappings/{role}',
      ...options,
    });
  }

  /**
   * Update a single permission mapping
   * Requires 'Administer System' permission.
   */
  public static updateMapping<ThrowOnError extends boolean = false>(
    options: Options<UpdateMappingData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateMappingResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-permission-mappings/{role}',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class GitlabConfigurationController {
  /**
   * Search GitLab configs
   *   Get the list of GitLab configurations.
   * Note that a single configuration is supported at this time.
   * Requires 'Administer System' permission.
   *
   */
  public static searchGitlabConfiguration<ThrowOnError extends boolean = false>(
    options?: Options<SearchGitlabConfigurationData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      SearchGitlabConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-configurations',
      ...options,
    });
  }

  /**
   * Create Gitlab configuration
   *   Create a new Gitlab configuration.
   * Note that only a single configuration can exist at a time.
   * Requires 'Administer System' permission.
   *
   */
  public static create3<ThrowOnError extends boolean = false>(
    options: Options<Create3Data, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      Create3Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-configurations',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Delete a GitLab configuration
   * Delete a GitLab configuration.
   * Requires 'Administer System' permission.
   *
   */
  public static deleteGitlabConfiguration<ThrowOnError extends boolean = false>(
    options: Options<DeleteGitlabConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeleteGitlabConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-configurations/{id}',
      ...options,
    });
  }

  /**
   * Fetch a GitLab configuration
   * Fetch a GitLab configuration. Requires 'Administer System' permission.
   *
   */
  public static getGitlabConfiguration<ThrowOnError extends boolean = false>(
    options: Options<GetGitlabConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      GetGitlabConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-configurations/{id}',
      ...options,
    });
  }

  /**
   * Update a Gitlab configuration
   * Update a Gitlab configuration. Requires 'Administer System' permission.
   *
   */
  public static updateGitlabConfiguration<ThrowOnError extends boolean = false>(
    options: Options<UpdateGitlabConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateGitlabConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/gitlab-configurations/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class GithubPermissionMappingsController {
  /**
   * Fetch permissions mapping
   * Get the list of all the existing roles with their permission mappings. Requires 'Administer System' permission.
   */
  public static fetchAll1<ThrowOnError extends boolean = false>(
    options?: Options<FetchAll1Data, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      FetchAll1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-permission-mappings',
      ...options,
    });
  }

  /**
   * Create a permission mapping for a custom role
   * Requires 'Administer System' permission.
   */
  public static createMapping1<ThrowOnError extends boolean = false>(
    options: Options<CreateMapping1Data, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      CreateMapping1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-permission-mappings',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Delete a single permission mappings
   * Requires 'Administer System' permission.
   */
  public static deleteMapping1<ThrowOnError extends boolean = false>(
    options: Options<DeleteMapping1Data, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeleteMapping1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-permission-mappings/{role}',
      ...options,
    });
  }

  /**
   * Update a single permission mapping
   * Requires 'Administer System' permission.
   */
  public static updateMapping1<ThrowOnError extends boolean = false>(
    options: Options<UpdateMapping1Data, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateMapping1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-permission-mappings/{role}',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class GithubConfigurationController {
  /**
   * Search GitHub configs
   *   Get the list of GitHub configurations.
   * Note that a single configuration is supported at this time.
   * Requires 'Administer System' permission.
   *
   */
  public static searchGithubConfiguration<ThrowOnError extends boolean = false>(
    options?: Options<SearchGithubConfigurationData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      SearchGithubConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-configurations',
      ...options,
    });
  }

  /**
   * Create GitHub configuration
   *   Create a new GitHub configuration.
   * Note that only a single configuration can exist at a time.
   * Requires 'Administer System' permission.
   *
   */
  public static createGithubConfiguration<ThrowOnError extends boolean = false>(
    options: Options<CreateGithubConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      CreateGithubConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-configurations',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Delete a GitHub configuration
   * Delete a GitHub configuration.
   * Requires 'Administer System' permission.
   *
   */
  public static deleteGithubConfiguration<ThrowOnError extends boolean = false>(
    options: Options<DeleteGithubConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeleteGithubConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-configurations/{id}',
      ...options,
    });
  }

  /**
   * Fetch a GitHub configuration
   * Fetch a GitHub configuration. Requires 'Administer System' permission.
   *
   */
  public static getGithubConfiguration<ThrowOnError extends boolean = false>(
    options: Options<GetGithubConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      GetGithubConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-configurations/{id}',
      ...options,
    });
  }

  /**
   * Update a GitHub configuration
   * Update a GitHub configuration. Requires 'Administer System' permission.
   *
   */
  public static updateGithubConfiguration<ThrowOnError extends boolean = false>(
    options: Options<UpdateGithubConfigurationData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateGithubConfigurationResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/github-configurations/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class BoundProjectsController {
  /**
   * Create a SonarQube project with the information from the provided DevOps platform project.
   * Create a SonarQube project with the information from the provided DevOps platform project.
   * Autoconfigure Pull-Request decoration mechanism.
   * Requires the 'Create Projects' permission and setting a Personal Access Token with api/alm_integrations/set_pat for a user who will be using this endpoint
   *
   */
  public static createBoundProject<ThrowOnError extends boolean = false>(
    options: Options<CreateBoundProjectData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      CreateBoundProjectResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/bound-projects',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }
}

export class RuleController {
  /**
   * Custom rule creation
   *   Create a custom rule.
   * Requires the 'Administer Quality Profiles' permission.
   *
   */
  public static create4<ThrowOnError extends boolean = false>(
    options: Options<Create4Data, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      Create4Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/clean-code-policy/rules',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }
}

export class GroupController {
  /**
   * Group search
   *   Get the list of groups.
   * The results are sorted alphabetically by group name.
   *
   */
  public static search1<ThrowOnError extends boolean = false>(
    options?: Options<Search1Data, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      Search1Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/groups',
      ...options,
    });
  }

  /**
   * Create a new group
   * Create a new group.
   */
  public static create5<ThrowOnError extends boolean = false>(
    options: Options<Create5Data, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      Create5Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/groups',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Deletes a group
   * Deletes a group.
   */
  public static deleteGroup<ThrowOnError extends boolean = false>(
    options: Options<DeleteGroupData, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeleteGroupResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/groups/{id}',
      ...options,
    });
  }

  /**
   * Fetch a single group
   * Fetch a single group.
   */
  public static fetchGroup<ThrowOnError extends boolean = false>(
    options: Options<FetchGroupData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      FetchGroupResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/groups/{id}',
      ...options,
    });
  }

  /**
   * Update a group
   * Update a group name or description.
   *
   */
  public static updateGroup<ThrowOnError extends boolean = false>(
    options: Options<UpdateGroupData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateGroupResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/groups/{id}',
      ...options,
      headers: {
        'Content-Type': 'application/merge-patch+json',
        ...options.headers,
      },
    });
  }
}

export class GroupMembershipController {
  /**
   * Search across group memberships
   *   Get the list of groups and members matching the query.
   *
   */
  public static search2<ThrowOnError extends boolean = false>(
    options?: Options<Search2Data, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      Search2Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/group-memberships',
      ...options,
    });
  }

  /**
   * Add a group membership
   * Add a user to a group.
   */
  public static create6<ThrowOnError extends boolean = false>(
    options: Options<Create6Data, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      Create6Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/group-memberships',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Remove a group membership
   * Remove a user from a group
   */
  public static delete<ThrowOnError extends boolean = false>(
    options: Options<DeleteData, ThrowOnError>,
  ) {
    return (options.client ?? client).delete<
      DeleteResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/authorizations/group-memberships/{id}',
      ...options,
    });
  }
}

export class K {
  /**
   * Get the status of SCA enablement
   */
  public static getFeatureEnablement<ThrowOnError extends boolean = false>(
    options?: Options<GetFeatureEnablementData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetFeatureEnablementResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/feature-enablements',
      ...options,
    });
  }

  /**
   * Update SCA enablement settings
   */
  public static updateFeatureEnablement<ThrowOnError extends boolean = false>(
    options: Options<UpdateFeatureEnablementData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      UpdateFeatureEnablementResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/feature-enablements',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }

  /**
   * Get a software bill of materials (SBOM) report
   * Return a report based on the dependencies in this project's branch, using
   * the type parameter and Accept header to select the report to generate.
   *
   * Right now, the available reports have specialized MIME types that
   * go along with those formats:
   *
   * * CycloneDX: https://cyclonedx.org/specification/overview/
   * * JSON & XML
   * * SPDX 2.3: https://spdx.github.io/spdx-spec/v2.3/
   * * JSON & XML
   *
   * Theoretically you could send just the MIME type for the format you wanted
   * as the Accept header and get that report. However, there may be other
   * formats that don't have a specific MIME type attached -- think two
   * different flavors of a CSV report, for example. In that case, we still
   * need a specific report type parameter to help differentiate more.
   *
   * This is an internal API and is subject to change without notice.
   *
   */
  public static generateReport<ThrowOnError extends boolean = false>(
    options: Options<GenerateReportData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      GenerateReportResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/sbom-reports',
      ...options,
    });
  }

  /**
   * Search for releases
   * Search for package releases that appear in the analyzed project,
   * as determined by software composition analysis.
   *
   * This endpoint returns one result for each release,
   * rather than one result for each time a release is pulled in.
   * Each result may appear in multiple files or scopes that
   * all use the same version of the affected package.
   *
   * The search results do not include full details on the dependencies
   * that pull in each release, only a summary. To get the full dependency
   * details, use the /releases/{key} endpoint for a single release.
   *
   * In the terminology of this endpoint, a "release" is a version of
   * a package like "lodash 1.2.3", and a "dependency" is a specific file
   * and scope that pulls in the release such as "subproject/pom.xml test".
   * Each returned release may have multiple dependencies.
   *
   * This is an internal API and is subject to change without notice.
   *
   */
  public static search3<ThrowOnError extends boolean = false>(
    options: Options<Search3Data, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      Search3Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/releases',
      ...options,
    });
  }

  /**
   * Get a single release
   * Fetch a single release by its key.
   *
   * This single-release endpoint lists full details for all dependencies
   * that mention the release.
   *
   * In the terminology of this endpoint, a "release" is a version of
   * a package like "lodash 1.2.3", and a "dependency" is a specific file
   * and scope that pulls in the release such as "subproject/pom.xml test".
   * Each returned release may have multiple dependencies.
   *
   * This is an internal API and is subject to change without notice.
   *
   */
  public static fetchRelease<ThrowOnError extends boolean = false>(
    options: Options<FetchReleaseData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      FetchReleaseResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/releases/{key}',
      ...options,
    });
  }

  /**
   * Search for issue-release pairs
   * Search for software composition analysis issues (dependency risks)
   * of a project, paired with releases that appear in the analyzed
   * project.
   *
   * This endpoint returns one result for each (issue,release) pair,
   * rather than one result for each distinct issue. So for example
   * if a library uses two different versions of a package and
   * both versions are affected by the same vulnerability, you will
   * get two results not one.
   *
   * However each result may appear in multiple files or scopes that
   * all use the same version of the affected package.
   *
   * In the terminology of this endpoint, a "release" is a version of
   * a package like "lodash 1.2.3", an "issue" is a problem such as
   * "CVE-1234", and a "dependency" is a specific file and scope that
   * pulls in the release such as "subproject/pom.xml test".
   *
   * The dependencyRisks attribute in the result is deprecated; please
   * use issuesReleases instead.
   *
   * This is an internal API and is subject to change without notice.
   *
   */
  public static search4<ThrowOnError extends boolean = false>(
    options: Options<Search4Data, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      Search4Responses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/issues-releases',
      ...options,
    });
  }

  /**
   * Get a single issue-release pair
   * Fetch a single (issue,release) pair (dependency risk), using the key from the search endpoint.
   *
   * This is an internal API and is subject to change without notice.
   *
   */
  public static fetchDependencyRisk<ThrowOnError extends boolean = false>(
    options: Options<FetchDependencyRiskData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      FetchDependencyRiskResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/issues-releases/{key}',
      ...options,
    });
  }

  /**
   * Get available CLI downloads
   * Gets the available SCA CLI downloads. The response includes metadata about each option
   * such as the filename and operating system.
   *
   * This is an internal API and is subject to change without notice.
   *
   */
  public static getScaClisMetadata<ThrowOnError extends boolean = false>(
    options?: Options<GetScaClisMetadataData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetScaClisMetadataResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/clis',
      ...options,
    });
  }

  /**
   * Get metadata for a specific CLI download
   * Gets the metadata for a specific SCA CLI download. The response includes the
   * filename, SHA-256 checksum, operating system, and CPU architecture.
   *
   * This is an internal API and is subject to change without notice.
   *
   */
  public static downloadScaCli<ThrowOnError extends boolean = false>(
    options: Options<DownloadScaCliData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      DownloadScaCliResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/sca/clis/{id}',
      ...options,
    });
  }

  /**
   * Find the file graph for this project branch and source.
   */
  public static 踼<ThrowOnError extends boolean = false>(
    options: Options<踼Data, ThrowOnError>,
  ) {
    return (options.client ?? client).get<踼Responses, unknown, ThrowOnError>({
      url: '/v2/architecture/file-graph',
      ...options,
    });
  }
}

export class ModeController {
  /**
   * Retrieve current instance Mode
   * Fetch the current instance mode. Can be Multi-Quality Rules (MQR) Mode or Standard Experience.
   *
   */
  public static getMode<ThrowOnError extends boolean = false>(
    options?: Options<GetModeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetModeResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/clean-code-policy/mode',
      ...options,
    });
  }

  /**
   * Update current instance Mode
   * Update the current instance mode. Can be Multi-Quality Rules (MQR) Mode or Standard Experience.
   * Requires 'Administer System' permission.
   *
   */
  public static patchMode<ThrowOnError extends boolean = false>(
    options: Options<PatchModeData, ThrowOnError>,
  ) {
    return (options.client ?? client).patch<
      PatchModeResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/clean-code-policy/mode',
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });
  }
}

export class DatabaseMigrationsController {
  /**
   * Gets the status of ongoing database migrations, if any
   * Return the detailed status of ongoing database migrations including starting date. If no migration is ongoing or needed it is still possible to call this endpoint and receive appropriate information.
   */
  public static getStatus<ThrowOnError extends boolean = false>(
    options?: Options<GetStatusData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetStatusResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/system/migrations-status',
      ...options,
    });
  }
}

export class LivenessController {
  /**
   * Provide liveness of SonarQube, meant to be used as a liveness probe on Kubernetes
   *   Require 'Administer System' permission or authentication with passcode.
   *
   * When SonarQube is fully started, liveness check for database connectivity, Compute Engine status, and, except for DataCenter Edition, if ElasticSearch is Green or Yellow.
   *
   * When SonarQube is on Safe Mode (for example when a database migration is running), liveness check only for database connectivity
   *
   */
  public static livenessCheck<ThrowOnError extends boolean = false>(
    options?: Options<LivenessCheckData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      LivenessCheckResponses,
      LivenessCheckErrors,
      ThrowOnError
    >({
      url: '/v2/system/liveness',
      ...options,
    });
  }
}

export class HealthController {
  public static getHealth<ThrowOnError extends boolean = false>(
    options?: Options<GetHealthData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetHealthResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/system/health',
      ...options,
    });
  }
}

export class SupportedLlmProviderController {
  /**
   * Get the supported LLM providers
   * Returns the LLM providers that could be used for requesting an AI fix suggestion
   */
  public static getLlmProviders<ThrowOnError extends boolean = false>(
    options?: Options<GetLlmProvidersData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetLlmProvidersResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/fix-suggestions/supported-llm-providers',
      ...options,
    });
  }
}

export class ServiceInfoController {
  /**
   * Request status and subscription information of AI CodeFix service
   */
  public static get<ThrowOnError extends boolean = false>(
    options?: Options<GetData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<GetResponses, unknown, ThrowOnError>(
      {
        url: '/v2/fix-suggestions/service-info',
        ...options,
      },
    );
  }

  /**
   * Request subscription information of AI CodeFix service
   */
  public static getSubscriptionType<ThrowOnError extends boolean = false>(
    options?: Options<GetSubscriptionTypeData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetSubscriptionTypeResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/fix-suggestions/service-info/subscription-type',
      ...options,
    });
  }
}

export class FixSuggestionIssueController {
  /**
   * Fetch AI suggestion availability for the given issueId
   * Requires Code Viewer permission.
   */
  public static get1<ThrowOnError extends boolean = false>(
    options: Options<Get1Data, ThrowOnError>,
  ) {
    return (options.client ?? client).get<Get1Responses, unknown, ThrowOnError>(
      {
        url: '/v2/fix-suggestions/issues/{issueId}',
        ...options,
      },
    );
  }
}

export class ProjectBindingsController {
  /**
   * Search across project bindings
   */
  public static getProjectBindingByProjectId<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetProjectBindingByProjectIdData, ThrowOnError>) {
    return (options?.client ?? client).get<
      GetProjectBindingByProjectIdResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/project-bindings',
      ...options,
    });
  }

  /**
   * Fetch a single Project Binding
   */
  public static getProjectBinding<ThrowOnError extends boolean = false>(
    options: Options<GetProjectBindingData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      GetProjectBindingResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/project-bindings/{id}',
      ...options,
    });
  }
}

export class DopSettingsController {
  /**
   * List all DevOps Platform Integration settings
   * Requires the 'Create Projects' permission
   */
  public static fetchAllDopSettings<ThrowOnError extends boolean = false>(
    options?: Options<FetchAllDopSettingsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      FetchAllDopSettingsResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/dop-translation/dop-settings',
      ...options,
    });
  }
}

export class VersionController {
  /**
   * Server version
   * Get the version of the Scanner Engine
   */
  public static getVersion<ThrowOnError extends boolean = false>(
    options?: Options<GetVersionData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetVersionResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/analysis/version',
      ...options,
    });
  }
}

export class JresController {
  /**
   * All JREs metadata
   * Get metadata of all available JREs
   */
  public static getJresMetadata<ThrowOnError extends boolean = false>(
    options?: Options<GetJresMetadataData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      GetJresMetadataResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/analysis/jres',
      ...options,
    });
  }

  /**
   * JRE download/metadata
   * This endpoint return the JRE metadata by default. To download the JRE binary asset, set the Accept header of the request to 'application/octet-stream'.
   */
  public static downloadJre<ThrowOnError extends boolean = false>(
    options: Options<DownloadJreData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      DownloadJreResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/analysis/jres/{id}',
      ...options,
    });
  }
}

export class ScannerEngineController {
  /**
   * Scanner engine download/metadata
   * This endpoint return the Scanner Engine metadata by default. To download the Scanner Engine, set the Accept header of the request to 'application/octet-stream'.
   */
  public static downloadScannerEngine<ThrowOnError extends boolean = false>(
    options?: Options<DownloadScannerEngineData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      DownloadScannerEngineResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/analysis/engine',
      ...options,
    });
  }
}

export class ActiveRulesController {
  /**
   * Get all active rules for a specific project
   * Used by the scanner-engine to get all active rules for a given project.
   */
  public static getActiveRules<ThrowOnError extends boolean = false>(
    options: Options<GetActiveRulesData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      GetActiveRulesResponses,
      unknown,
      ThrowOnError
    >({
      url: '/v2/analysis/active_rules',
      ...options,
    });
  }
}

export class Issue {
  /**
   * Search Issues
   * Search for issues based on various criteria. This endpoint supports pagination and filtering. The response includes issue details, paging information, and facets if requested.
   * Requires the 'Browse' permission on the specified project(s).
   * For applications, it also requires 'Browse' permission on its child projects.
   * When issue indexing is in progress returns 503 service unavailable HTTP code.
   */
  public static searchIssues<ThrowOnError extends boolean = false>(
    options?: Options<SearchIssuesData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      SearchIssuesResponses,
      SearchIssuesErrors,
      ThrowOnError
    >({
      security: [
        {
          scheme: 'basic',
          type: 'http',
        },
        {
          scheme: 'bearer',
          type: 'http',
        },
      ],
      url: '/issues/search',
      ...options,
    });
  }
}

export class Project {
  /**
   * Search Projects
   * Search for projects
   */
  public static searchProjects<ThrowOnError extends boolean = false>(
    options?: Options<SearchProjectsData, ThrowOnError>,
  ) {
    return (options?.client ?? client).get<
      SearchProjectsResponses,
      SearchProjectsErrors,
      ThrowOnError
    >({
      url: '/projects/search',
      ...options,
    });
  }

  /**
   * Get a list of projects and license usage.
   */
  public static getAListOfProjectsAndLicenseUsage<
    ThrowOnError extends boolean = false,
  >(options?: Options<GetAListOfProjectsAndLicenseUsageData, ThrowOnError>) {
    return (options?.client ?? client).get<
      GetAListOfProjectsAndLicenseUsageResponses,
      GetAListOfProjectsAndLicenseUsageErrors,
      ThrowOnError
    >({
      url: '/projects/license_usage',
      ...options,
    });
  }
}

export class Measures {
  /**
   * Component
   * Return component with specified measures.
   * Requires the following permission: 'Browse' on the project of specified component.
   */
  public static component<ThrowOnError extends boolean = false>(
    options: Options<ComponentData, ThrowOnError>,
  ) {
    return (options.client ?? client).get<
      ComponentResponses,
      ComponentErrors,
      ThrowOnError
    >({
      url: '/measures/component',
      ...options,
    });
  }
}

export class Permission {
  /**
   * Add permission to a user
   * This service defaults to global permissions, but can be limited to project permissions by providing project id or project key.
   *
   * Requires one of the following permissions:
   * 'Administer System' or 'Administer' rights on the specified project
   */
  public static addPermissionToAuser<ThrowOnError extends boolean = false>(
    options: Options<AddPermissionToAuserData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      AddPermissionToAuserResponses,
      unknown,
      ThrowOnError
    >({
      url: '/permissions/add_user',
      ...options,
    });
  }

  /**
   * Add a permission to a group
   * This service defaults to global permissions, but can be limited to project permissions by providing project id or project key.
   *
   * The group name must be provided.
   *
   * Requires one of the following permissions:
   * 'Administer System' or 'Administer' rights on the specified project
   */
  public static addAPermissionToAGroup<ThrowOnError extends boolean = false>(
    options: Options<AddAPermissionToAGroupData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      AddAPermissionToAGroupResponses,
      unknown,
      ThrowOnError
    >({
      url: '/permissions/add_group',
      ...options,
    });
  }

  /**
   * Remove permission from a user
   * This service defaults to global permissions, but can be limited to project permissions by providing project id or project key.
   *
   * Requires one of the following permissions:
   * 'Administer System'
   *
   * 'Administer' rights on the specified project
   */
  public static removePermissionFromAuser<ThrowOnError extends boolean = false>(
    options: Options<RemovePermissionFromAuserData, ThrowOnError>,
  ) {
    return (options.client ?? client).post<
      RemovePermissionFromAuserResponses,
      unknown,
      ThrowOnError
    >({
      url: '/permissions/remove_user',
      ...options,
    });
  }

  /**
   * Remove a permission from a group
   * This service defaults to global permissions, but can be limited to project permissions by providing project id or project key.
   *
   * The group name must be provided.
   *
   * Requires one of the following permissions:
   * 'Administer System' or 'Administer' rights on the specified project
   */
  public static removeAPermissionFromAGroup<
    ThrowOnError extends boolean = false,
  >(options: Options<RemoveAPermissionFromAGroupData, ThrowOnError>) {
    return (options.client ?? client).post<
      RemoveAPermissionFromAGroupResponses,
      unknown,
      ThrowOnError
    >({
      url: '/permissions/remove_group',
      ...options,
    });
  }
}
